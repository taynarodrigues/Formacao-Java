Visibilidade de Atributos e Métodos
+ publico
- privado
# protegido

classe Caneta
+ modelo
+ cor
- ponta
# carga
# tampada

+ escrever()
+ rabiscar()
+ pintar()
- tampar()
- destampar()

Aula04_Métodos Especiais

protected é público para os filhos
super -> ver a hierarquia "Olhar pra cima!", e que o atributo não está definido na classe

A palavra chave com a menor visibilidade é private, depois vem o protected e depois public.

private - apenas visível dentro da classe

protected - visível dentro da classe e também para as filhas

public - visível em todo lugar

Repare também que protected é relacionado com a herança.

1) Uma classe pode ter várias filhas, mas apenas uma mãe.

2) A partir de uma instância de uma classe filha, podemos chamar qualquer método público que tenha sido declarado na classe mãe.



Nessa aula de Polimorfismo aprendemos que:

objetos não mudam de tipo;
a referência pode mudar, e aí entra o polimorfismo;
o polimorfismo permite usar referências mais genéricas para a comunicação com um objeto;
o uso de referências mais genéricas permite desacoplar sistemas.

Construtores não são herdados
Um construtor da classe mãe pode ser chamado através do super()

 sobre os métodos abstratos?
Não possuem corpo (implementação), apenas definem a assinatura.

Classes e métodos abstratos consomem menos memória e por conta disso melhoram o desempenho do nosso programa.
Correto, um método abstrato define apenas a assinatura (visibilidade, retorno, nome do método e parâmetros).

 sobre classes abstratas? 

Alternativa correta
Podem ter atributos

 
Correto, podemos sim ter atributos! Uma classes abstrata é uma classe normal, só não pode instanciar e pode ter métodos abstratos. O resto continua valendo!

Alternativa correta
Podem ter métodos concretos (com implementação)

 
Correto, como podem ter atributos também podem ter métodos concretos!

Alternativa correta
Podem ter métodos abstratos (sem implementação)

 
Correto, como vimos uma classe abstrata pode ter métodos sem implementação. Dessa forma obrigamos um filho implementar o método.

Alternativa correta
Não podem ser instanciadas

 
Correto, pois o que é abstrato (a classe) não pode se tornar concreto (objeto). Por isso não podemos instanciar objetos de uma classe abstrata.

Utilizamos este termo somente quando queremos herdar algo de outra classe, mas com a interface, estamos "assinando um contrato", isto significa no mundo Java que estamos implementando, por isso, utilizamos o implements:

public class Cliente implements Autenticavel {

}

Todos os métodos de uma interface são abstratos, os de uma classe abstrata podem não ser.

 
Correto, todos os métodos na interface são sempre abstratos e sempre públicos.

Em uma classe abstratos podemos ter métodos concretos e abstratos.

Podemos estender apenas uma classe abstrata, mas podemos implementar várias interfaces.

 
Correto! Existe apenas herança simples em Java, mas podemos implementar quantas interfaces que quisermos..

Sobre o polimorfismo
É a capacidade de um objeto ser referenciado por vários tipos.

 
Correta, podemos comunicar com um objeto através de tipos de variáveis diferentes.

Por exemplo, se existir uma classe Gerente que seja filha de Funcionario, um objeto do tipo Gerente pode ser referenciado com o tipo Funcionario também.

Temos polimorfismo quando uma classe extende de outra ou também quando uma classe implementa uma interface.

 
Correta, temos polimorfismo via herança ou interface.

Revisando conceitos de herança
A herança captura o que é comum e isola aquilo que é diferente entre classes. Há um acoplamento forte entre mãe e filho, por isso é preciso ter muito cautela na hora de usar a herança.

Revisando conceitos de interface

Garante que todos os métodos de classes que implementam uma interface possam ser chamados com segurança.

 
Correto! Isso é a ideia do contrato, garantindo que a classe tenha um comportamento, basta assinar o contrato (implementar a inteface).
-> Interfaces não podem possuir atributos.
 -> Na verdade interfaces são implementadas, não estendidas. 

Composição x Herança
Com composições e interfaces teremos mais flexibilidade com nosso código, já que não nos prenderemos ao acoplamento que a herança propõe.
Herança possibilita sim polimorfismo E reutilização.
Com interfaces temos uma alternativa ao polimorfismo, com a composição temos uma alternativa a reutilização de código.
 Normalmente o uso de interfaces (para definir o contrato e ter polimorfismo) e composição (para ter reutilização de código) é mais flexível comparado a herança.

java 4: Entendendo exceções
Sobre Stack
Por que a JVM usa um Stack?
Para saber qual método está sendo executado e Para organizar a execução dos métodos
 
Correto!

Uma pilha Java faz parte da JVM e armazena os métodos que estão sendo executados. Além do bloco de código a pilha guarda os variáveis e as referências desse bloco. Assim a JVM organiza a execução e sabe exatamente qual método está sendo executado que é sempre o método no topo da pilha. A JVM também sabe quais outros precisam ser executados ainda, que são justamente os métodos abaixo.
O que é Depuração?
-> chamado Ponto de Depuração ou também conhecido como Breakpoint. Ele pausa a execução em um ponto específico, caso nós executemos o projeto em modo Debug. Ao debugarmos o programa, será possível ver as mudanças em tempo real, em uma velocidade que podemos acompanhar. Para isso, clicaremos com o botão direito em "main() > Debug As > Java Application".


null -> significa que essa referência não aponta para nenhum objeto

Sobre exceções
Exceções não tratadas caem na pilha de execução procurando por alguém que saiba lidar com ela.
Toda exceção em Java possui um nome que a identifica. Essa abordagem torna seu entendimento mais fácil do que o uso de números mágicos (códigos de erros) como 15, 7012 ou 16.

Sobre os blocos try e catch
Para tratarmos uma exceção, que pode ocorrer enquanto nosso programa esta sendo executado, precisamos tratá-la antecipadamente com um bloco de código específico.
Não é possível ter uma instrução catch, sem uma instrução try.

 
Exato. A lógica de tratamento de erro no bloco catch só é disparada quando uma exceção é lançada dentro de um bloco try.
O bloco try apenas delimita a área na qual uma exceção pode ser lançada. É através do bloco catch que lidamos com a exceção capturada dentro de um bloco try.

Multi-Catch
try {
    System.out.println(1 / 0);
} catch (ArithmeticException | NullPointerException ex) {
    ex.printStackTrace();
}
 
Através de um | (pipe) na cláusula catch, podemos capturar mais de uma exceção. Com isso, podemos ter um único bloco para tratar um ou mais exceções.

Exceção: Não basta instanciar a exceção, é necessário lançá-la através do throw.
Exemplo
private static void metodo2() {
    System.out.println("Início do metodo2");
    ArithmeticException exception = new ArithmeticException();
    throw exception;
}

já que não é necessário guardar a exceção em uma referência, podendo lançá-la diretamente em uma linha só, por exemplo:

throw new ArithmeticException();


Anotações de Exceções

1-Existe uma hierarquia grande de classes que representam exceções. Por exemplo, ArithmeticException é filha de RuntimeException, que herda de Exception, que por sua vez é filha da classe mais ancestral das exceções, Throwable. Conhecer bem essa hierarquia significa saber utilizar exceções em sua aplicação.
2-Throwable é a classe que precisa ser extendida para que seja possível jogar um objeto na pilha (através da palavra reservada throw)
3-A hierarquia iniciada com a classe Throwable é dividida em exceções e erros. Exceções são usadas em códigos de aplicação. Erros são usados exclusivamente pela máquina virtual.Classes que comunicam erros da máquina virtual herdam de Error. 
4-StackOverflowError é um erro da máquina virtual para informar que a pilha de execução não tem mais memória.
5-Exceções são separadas em duas grandes categorias: aquelas que são obrigatoriamente verificadas pelo compilador e as que não são verificadas. As primeiras são denominadas checked e são criadas através do pertencimento a uma hieraquia que não passe por RuntimeException. As segundas são as unchecked, e são criadas como descendentes de RuntimeException.

Para fixar ainda mais, listamos os tópicos dessa aula:

Existe uma hierarquia grande de classes que representam exceções. Por exemplo, ArithmeticException é filha de RuntimeException, que herda de Exception, que por sua vez é filha da classe mais ancestral das exceções, Throwable. Conhecer bem essa hierarquia significa saber utilizar exceções em sua aplicação.
Throwable é a classe que precisa ser extendida para que seja possível jogar um objeto na pilha (através da palavra reservada throw)
É na classe Throwable que temos praticamente todo o código relacionada às exceções, inclusive getMessage() e printStackTrace(). Todo o resto da hierarquia apenas possui algumas sobrecargas de construtores para comunicar mensagens específicas
A hierarquia iniciada com a classe Throwable é dividida em exceções e erros. Exceções são usadas em códigos de aplicação. Erros são usados exclusivamente pela máquina virtual.
Classes que herdam de Error são usadas para comunicar erros na máquina virtual. Desenvolvedores de aplicação não devem criar erros que herdam de Error.
StackOverflowError é um erro da máquina virtual para informar que a pilha de execução não tem mais memória.
Exceções são separadas em duas grandes categorias: aquelas que são obrigatoriamente verificadas pelo compilador e as que não são verificadas.
As primeiras são denominadas checked e são criadas através do pertencimento a uma hieraquia que não passe por RuntimeException.
As segundas são as unchecked, e são criadas como descendentes de RuntimeException.


UNCHECKED x CHECKED
Unchecked-> Não são verificados pelo compilador
Checked->São veriificados pelo compilador

Lembrando, para ser unchecked precisa estender a classe RuntimeException.
Em geral, apenas um try isolado nunca funciona. Precisa ter "algo" a mais.
Criamos um catch genérico que captura qualquer exceção, incluindo exceções checked.

Isso pode parecer uma boa prática, mas normalmente não é. Como regra geral, sempre tente ser mais especifico possível no bloco catch favorecendo vários blocos catch ou usando multi-catch. 
try {
    metodoPerigosoQuePodeLancarVariasExcecoes();
} catch(Exception ex) {
    ex.printStackTrace();
}

De que maneira as exceptions podem ajudar a melhorar o código de seu programa?

a - Exceções tem um nome e, caso esse nome seja expressivo, documenta o problema que está ocorrendo.

b - Exceções podem ter uma mensagem, ou seja, o problema e o estado das variáveis podem ser descritos na mensagem.

c - Exceções mudam o fluxo de execução, ou seja, evitam que o problema siga o fluxo "normal" quando algo excepcional acontece.

d - Exceções podem ser tratadas, ou seja, podemos voltar para a execução "normal" caso o "problema" esteja resolvido.


USAR CHECKED
Como a exceção é checked, devemos usar throws SaldoInsuficienteException na assinatura do método saca da classe ContaCorrente.

 
Correto! Repare que chamamos super.saca(..) no método saca da classe ContaCorrente. O compilador perecebe que o método da classes mãe tem o throws de uma exceção checked é obriga o método filho tomar uma atitude.

Bloco finally

Um try sozinho nunca é válido. Ele exige pelo menos um catch ou um finally!
- O bloco finally é opcional independente do catch.
-O bloco finally sempre será executado (sem ou com exceção).
 - O bloco finally é tipicamente utilizado para fechar um recurso como conexão ou transação.
- O bloco finally, útil para o fechamento de recursos (como conexão);
-quando há um bloco finally o bloco catch é opcional;
-que o bloco finally é sempre executado, sem ou com exceção;

try com recurso

O bloco finally é criado automaticamente.
O recurso precisa implementar o método close().

Sobre FQN
É o nome completo da classe composto pelo nome do pacote e o nome da classe.

 
Correto, o FQN (Full Qualified Name) é nome completo da classe, composto pelo nome do pacote e o nome da classe.

FQN = Nome Pacote . Nome Simples da Classe

Sobre pacotes
 Packages são diretórios com significado especial dentro do código fonte Java
A palavra chave package deve ser a primeira declaração no código fonte Java.
 Packages servem para organização e agrupar as classes e interfaces.

Temos quatro modificadores: private, protected, default e public. Onde a ordem do MAIS restritivo para o MENOS restritivo é: private, default, protected e public.

protected-> O modificador protected funciona igual ao *<<package private>> mas adiciona a visibilidade para os filhos (chamado de "publico para os filhos").

<<package private>> (ausência do modificador) -> A ausência do modificador, também chamado de package private ou default, o membro fica visível na classe e no package, mas é invisível fora do pacote (nem para filhos).


aprendemos:
existem 3 palavras chaves relacionado com a visibilidade: private, protected, public
existem 4 níveis de visibilidade (de menor para maior):
private (visível apenas na classe)
<<package private>> (visível na classe E em qualquer outro membro do mesmo pacote, podendo ser chamado de default)
protected (visível na classe E em qualquer outro membro do mesmo pacote E para qualquer filho)
public (visível em qualquer pacote)
os modificadores podem ser usados na definição da classe, atributo, construtor e método

