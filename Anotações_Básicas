Visibilidade de Atributos e Métodos
+ publico
- privado
# protegido

classe Caneta
+ modelo
+ cor
- ponta
# carga
# tampada

+ escrever()
+ rabiscar()
+ pintar()
- tampar()
- destampar()

Aula04_Métodos Especiais

protected é público para os filhos
super -> ver a hierarquia "Olhar pra cima!", e que o atributo não está definido na classe

A palavra chave com a menor visibilidade é private, depois vem o protected e depois public.

private - apenas visível dentro da classe

protected - visível dentro da classe e também para as filhas

public - visível em todo lugar

Repare também que protected é relacionado com a herança.

1) Uma classe pode ter várias filhas, mas apenas uma mãe.

2) A partir de uma instância de uma classe filha, podemos chamar qualquer método público que tenha sido declarado na classe mãe.



Nessa aula de Polimorfismo aprendemos que:

objetos não mudam de tipo;
a referência pode mudar, e aí entra o polimorfismo;
o polimorfismo permite usar referências mais genéricas para a comunicação com um objeto;
o uso de referências mais genéricas permite desacoplar sistemas.

Construtores não são herdados
Um construtor da classe mãe pode ser chamado através do super()

 sobre os métodos abstratos?
Não possuem corpo (implementação), apenas definem a assinatura.

Classes e métodos abstratos consomem menos memória e por conta disso melhoram o desempenho do nosso programa.
Correto, um método abstrato define apenas a assinatura (visibilidade, retorno, nome do método e parâmetros).

 sobre classes abstratas? 

Alternativa correta
Podem ter atributos

 
Correto, podemos sim ter atributos! Uma classes abstrata é uma classe normal, só não pode instanciar e pode ter métodos abstratos. O resto continua valendo!

Alternativa correta
Podem ter métodos concretos (com implementação)

 
Correto, como podem ter atributos também podem ter métodos concretos!

Alternativa correta
Podem ter métodos abstratos (sem implementação)

 
Correto, como vimos uma classe abstrata pode ter métodos sem implementação. Dessa forma obrigamos um filho implementar o método.

Alternativa correta
Não podem ser instanciadas

 
Correto, pois o que é abstrato (a classe) não pode se tornar concreto (objeto). Por isso não podemos instanciar objetos de uma classe abstrata.

Utilizamos este termo somente quando queremos herdar algo de outra classe, mas com a interface, estamos "assinando um contrato", isto significa no mundo Java que estamos implementando, por isso, utilizamos o implements:

public class Cliente implements Autenticavel {

}

Todos os métodos de uma interface são abstratos, os de uma classe abstrata podem não ser.

 
Correto, todos os métodos na interface são sempre abstratos e sempre públicos.

Em uma classe abstratos podemos ter métodos concretos e abstratos.

Podemos estender apenas uma classe abstrata, mas podemos implementar várias interfaces.

 
Correto! Existe apenas herança simples em Java, mas podemos implementar quantas interfaces que quisermos..

Sobre o polimorfismo
É a capacidade de um objeto ser referenciado por vários tipos.

 
Correta, podemos comunicar com um objeto através de tipos de variáveis diferentes.

Por exemplo, se existir uma classe Gerente que seja filha de Funcionario, um objeto do tipo Gerente pode ser referenciado com o tipo Funcionario também.

Temos polimorfismo quando uma classe extende de outra ou também quando uma classe implementa uma interface.

 
Correta, temos polimorfismo via herança ou interface.

Revisando conceitos de herança
A herança captura o que é comum e isola aquilo que é diferente entre classes. Há um acoplamento forte entre mãe e filho, por isso é preciso ter muito cautela na hora de usar a herança.

Revisando conceitos de interface

Garante que todos os métodos de classes que implementam uma interface possam ser chamados com segurança.

 
Correto! Isso é a ideia do contrato, garantindo que a classe tenha um comportamento, basta assinar o contrato (implementar a inteface).
-> Interfaces não podem possuir atributos.
 -> Na verdade interfaces são implementadas, não estendidas. 

Composição x Herança
Com composições e interfaces teremos mais flexibilidade com nosso código, já que não nos prenderemos ao acoplamento que a herança propõe.
Herança possibilita sim polimorfismo E reutilização.
Com interfaces temos uma alternativa ao polimorfismo, com a composição temos uma alternativa a reutilização de código.
 Normalmente o uso de interfaces (para definir o contrato e ter polimorfismo) e composição (para ter reutilização de código) é mais flexível comparado a herança.

java 4: Entendendo exceções
Sobre Stack
Por que a JVM usa um Stack?
Para saber qual método está sendo executado e Para organizar a execução dos métodos
 
Correto!

Uma pilha Java faz parte da JVM e armazena os métodos que estão sendo executados. Além do bloco de código a pilha guarda os variáveis e as referências desse bloco. Assim a JVM organiza a execução e sabe exatamente qual método está sendo executado que é sempre o método no topo da pilha. A JVM também sabe quais outros precisam ser executados ainda, que são justamente os métodos abaixo.
O que é Depuração?
-> chamado Ponto de Depuração ou também conhecido como Breakpoint. Ele pausa a execução em um ponto específico, caso nós executemos o projeto em modo Debug. Ao debugarmos o programa, será possível ver as mudanças em tempo real, em uma velocidade que podemos acompanhar. Para isso, clicaremos com o botão direito em "main() > Debug As > Java Application".


null -> significa que essa referência não aponta para nenhum objeto

Sobre exceções
Exceções não tratadas caem na pilha de execução procurando por alguém que saiba lidar com ela.
Toda exceção em Java possui um nome que a identifica. Essa abordagem torna seu entendimento mais fácil do que o uso de números mágicos (códigos de erros) como 15, 7012 ou 16.

Sobre os blocos try e catch
Para tratarmos uma exceção, que pode ocorrer enquanto nosso programa esta sendo executado, precisamos tratá-la antecipadamente com um bloco de código específico.
Não é possível ter uma instrução catch, sem uma instrução try.

 
Exato. A lógica de tratamento de erro no bloco catch só é disparada quando uma exceção é lançada dentro de um bloco try.
O bloco try apenas delimita a área na qual uma exceção pode ser lançada. É através do bloco catch que lidamos com a exceção capturada dentro de um bloco try.

Multi-Catch
try {
    System.out.println(1 / 0);
} catch (ArithmeticException | NullPointerException ex) {
    ex.printStackTrace();
}
 
Através de um | (pipe) na cláusula catch, podemos capturar mais de uma exceção. Com isso, podemos ter um único bloco para tratar um ou mais exceções.
